@page "/agents"
@using ContainerDeck.Shared.Components
@using ContainerDeck.Shared.Dialogs
@using ContainerDeck.Shared.Models
@using ContainerDeck.Shared.Services
@using ContainerDeck.Shared.Utils
@using Microsoft.Extensions.Logging
@using static ContainerDeck.Shared.Dialogs.AddAgentDialog

@inject IDialogService DialogService
@inject AgentsService AgentsService

<PageTitle>Agents</PageTitle>

<div class="d-flex">
    <FluentLabel Typo="Typography.H4">Agents</FluentLabel>
    <FluentSpacer />
    <FluentIcon Icon="Icons.Filled.Size32.Add" OnClick="AddAgentDialogAsync" />
</div>
<FluentDivider />
<div class="component-table">
    @foreach (var agent in @AgentsService.Get())
    {
        <AgentComponent ThisAgent="agent"></AgentComponent>
    }
</div>

@code
{
    [Inject]
    private ILogger<AgentsPage> Logger { get; set; } = Hub.GetLogger<AgentsPage>();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Action d = async () => await UpdateUi();
            AgentsService.Detach(d);
            AgentsService.AgentsChanged += d;
        }
    }

    private async Task UpdateUi()
    {
        Logger.LogDebug("UpdateUi");
        await InvokeAsync(StateHasChanged);
    }

    private DialogParameters GetDialogParameters()
    {
        return new DialogParameters()
            {
                Height = "240px",
                Title = $"Add a new container deck agent",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };
    }

    private async Task AddAgentDialogAsync()
    {
        var data = new Agent("Local", "http://localhost:5000");
        var dialog = await DialogService.ShowDialogAsync<AddAgentDialog>(data, GetDialogParameters());

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            var agent = (Agent)result.Data;
            AgentsService.Add(agent);
        }
    }

   
}