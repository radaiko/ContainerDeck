@page "/agents"
@using ContainerDeck.Shared.Components
@using ContainerDeck.Shared.Dialogs
@using ContainerDeck.Shared.Models
@using ContainerDeck.Shared.Services
@using ContainerDeck.Shared.Utils
@using Microsoft.Extensions.Logging

@inject AgentsService AgentsService

<PageTitle>Agents</PageTitle>

<div class="row-space-between">
    <span>Agents</span>
    <div class="spacer"></div>
    <button class="btn icon-btn row-space-horizontal-center" @onclick="() => AddAgentDialog()">
        <i class="icon icon-add"></i>
    </button>
</div>
<hr />
<div class="component-table">
    @foreach (var agent in @AgentsService.Get())
    {
        <AgentComponent This="agent"></AgentComponent>
    }
</div>

<BaseDialog Title="Add new Agent" Opened="dialogShown">
    <BodyContent>
        <AgentDialog Agent=newAgent></AgentDialog>
    </BodyContent>

    <FooterContent>
        <button class="btn save-button" @onclick="() => SaveAgent()">Save</button>
        <button class="btn cancel-button" @onclick="() => dialogShown = false">Cancel</button>
    </FooterContent>
</BaseDialog>

@code
{
    [Inject]
    private ILogger<AgentsPage> Logger { get; set; } = Hub.GetLogger<AgentsPage>();

    private Agent newAgent = new Agent("Local", "http://localhost:5000");

    private bool dialogShown = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Action d = async () => await UpdateUi();
            AgentsService.Detach(d);
            AgentsService.AgentsChanged += d;
        }
    }

    private async Task UpdateUi()
    {
        Logger.LogDebug("UpdateUi");
        await InvokeAsync(StateHasChanged);
    }

    private void AddAgentDialog()
    {
        var newAgent = new Agent("Local", "http://localhost:5000");
        dialogShown = true;
    }

    private void SaveAgent() {
        AgentsService.Add(newAgent);
        dialogShown = false;
    }
}